
;;; Entity Types
TYPE User
TYPE Email
TYPE Name
TYPE Role = {admin, user}
TYPE Session

;;; Relations with cardinality constraints

[email, user]  :  User?    > Email!
[name, user]   :  User     > Name!
[role, user]   :  User     > Role!
[user, session]:  Session  > User!

;;; Derived Entity sets
 email-set   : set[Email]   = user-set.email        ; set of emails in the system
 name-set    : set[Name]    = user-set.name         ; set of names in the system
 role-set    : set[Role]    = user-set.role         ; set of all roles of all users
 logged-in-user-set : set[User]   = session-set.user   
 logged-in-role-set :  set[Role]  = session-set.user.role

    ;;; The admin-user

    admin-user: user-set ; there is a user called admin-user in user-set

    admin-user.role = admin ; that user's role is admin.

    FORALL u:user-set  u.role=admin IMPLIES u = admin-user   ; there is only
                                                             ; one user with
                                                             ; role admin.

;;; Relation variables with Referential Integrity
[email, user]    :  user-set!    > email-set!
[name, users]    :  user-set+    > name-set!    
[role, users]    :  user-set+    > role-set!   
[role, session]  :  session-set  >  role-set!
